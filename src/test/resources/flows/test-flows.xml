<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<sub-flow name="createOpportunityFlow">
		<sfdc:create config-ref="Salesforce" type="Opportunity"
			doc:name="create Opportunity in Salesforce">
			<sfdc:objects ref="#[payload]" />
		</sfdc:create>
		<logger level="INFO"
			message="Create Opportunities in Salesforce result: #[payload]"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="retrieveOpportunityFlow">
        <logger message="Retrieving Opportunity by externalId : #[payload.Id]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Create search criteria">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{	basic: {		externalId: {			operator: "ANY_OF",			searchValue: [{				externalId: payload.Id
			}]
		}
	}
}as :object {class : "com.netsuite.webservices.transactions.sales.OpportunitySearch"}]]></dw:set-payload>
        </dw:transform-message>
        <enricher source="#[payload.hasNext() ? payload.next() : NullPayload.getInstance()]" target="#[payload]" doc:name="retrieve object">
            <netsuite:search config-ref="NetSuite" searchRecord="OPPORTUNITY" doc:name="retrieve Opportunity from Netsuite"/>
        </enricher>

		<logger level="INFO" message="Retrieved opportunity: #[payload]"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="deleteOpportunitiesFromSalesforceFlow">
		<sfdc:delete config-ref="Salesforce"
			doc:name="delete Opportunity from Salesforce">
			<sfdc:ids ref="#[payload]" />
		</sfdc:delete>
		<logger level="INFO"
			message="Remove Opportunities from Salesforce result: #[payload]"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="deleteOpportunitiesFromNetsuiteFlow">
        <netsuite:delete-list config-ref="NetSuite" doc:name="delete Opportunity from Netsuite"/>

        <foreach doc:name="For Each Opportunity">
            <logger message="Remove Opportunity with ID #[payload.getBaseRef().getInternalId()] from Netsuite result: #[payload.getStatus().getIsSuccess()]" level="INFO" doc:name="Logger"/>
        </foreach>
	</sub-flow>

	<sub-flow name="createAccountFlow">
		<sfdc:create config-ref="Salesforce" type="Account"
			doc:name="Salesforce">
			<sfdc:objects ref="#[payload]" />
		</sfdc:create>
        <logger message="Create Account in Salesforce result: #[payload]" level="INFO" doc:name="Logger"/>
	</sub-flow>
	<sub-flow name="retrieveCustomerFlow">
        <logger message="Retrieving Customer by name : #[payload.Name]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Create search criteria">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	basic: {
		companyName: {
			operator: "IS",
			searchValue: payload.Name
		}
	}
} as :object { class: "com.netsuite.webservices.lists.relationships.CustomerSearch" }]]></dw:set-payload>
        </dw:transform-message>
        <enricher source="#[payload.hasNext() ? payload.next() : NullPayload.getInstance()]" target="#[payload]" doc:name="retrieve object">
            <netsuite:search config-ref="NetSuite" searchRecord="CUSTOMER" doc:name="Retrieve customer from Netsuite"/>
        </enricher>

<!-- 		<netsuite:query-records config-ref="NetSuite" -->
<!-- 			query="dsql:SELECT companyName,entityId,entityStatus,externalId,internalId FROM CUSTOMER WHERE companyName = '#[payload.Name]'" -->
<!-- 			doc:name="Retrieve Customer from Netsuite" /> -->

		<logger level="INFO" message="Retrieve Customer result: #[payload]"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="deleteAccountsFromSalesforceFlow">
		<sfdc:delete config-ref="Salesforce" doc:name="Salesforce">
			<sfdc:ids ref="#[payload]" />
		</sfdc:delete>
		<logger level="INFO"
			message="Remove Accounts from Salesforce result: #[payload]"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="deleteCustomersFromNetsuiteFlow">
		<netsuite:delete-list config-ref="NetSuite"
			doc:name="Netsuite">

		</netsuite:delete-list>
        <foreach collection="#[payload]" doc:name="For Each Customer">
            <logger message="Remove Customer with ID #[payload.getBaseRef().getInternalId()] from Netsuite result: #[payload.getStatus().getIsSuccess()]" level="INFO" doc:name="Logger"/>
        </foreach>
	</sub-flow>

</mule>
