<?xml version="1.0" encoding="UTF-8"?>

<mule version="EE-3.7.1"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

	<batch:job name="migrateOpportunitiesBatch" max-failed-records="-1">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
			<sfdc:query config-ref="Salesforce"
				query="dsql:SELECT Id, Name, Amount, StageName, Probability, CloseDate, Account.Id, Account.Name FROM Opportunity WHERE Account.Id &lt;&gt; null"
				fetchSize="${page.size}" doc:name="Query Opportunities from Salesforce" />
		</batch:input>
		<batch:process-records>

			<batch:step name="getCustomerIfExistsStep" >
				<enricher source="#[payload.hasNext() ? payload.next()[&quot;internalId&quot;] : null]" target="#[payload.InternalId]"
					doc:name="store result in customerInNetsuite">
                    <netsuite:query-records config-ref="NetSuite" query="dsql:SELECT internalId FROM CUSTOMER WHERE companyName = '#[payload.Account.Name]'" doc:name="Query Customer in Netsuite"/>

				</enricher>
			</batch:step>
			<batch:step name="createCustomerIfDoesNotExistStep"
				accept-expression="#[payload.InternalId == null]" >
				<enricher target="#[payload.InternalId]"
					doc:name="store result in customerInNetsuite" source="#[payload.getInternalId()]">
					<processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Transform payload to Customer in Netsuite">
                        	<dw:input-payload mimeType="application/java"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	companyName 	: payload.Account.Name,
	subsidiary 		: {
		internalId 	: p('nets.customer.subsidiary.internalId'),
		type 		: 'SUBSIDIARY'
	}
}]]></dw:set-payload>
                        </dw:transform-message>

						<netsuite:add-record config-ref="NetSuite"
							recordType="CUSTOMER" doc:name="Create Customer in Netsuite">
							<netsuite:attributes ref="#[payload]">
							</netsuite:attributes>
						</netsuite:add-record>
						<logger
							message="New Customer created in Netsuite: #[payload.getInternalId()]"
							level="INFO" doc:name="Log created Customer" />


					</processor-chain>
				</enricher>
			</batch:step>
            <batch:step name="upsertOpportunitiesInNetsuiteStep"  >

                <dw:transform-message doc:name="Transform Opportunity from Salesforce to Opportunity in Netsuite">
                	<dw:input-payload mimeType="application/java"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java

//find status number according to stage name otherwise use default one - defined in properties file
%function stageToStatus(stage)  
using (defaultStatus = p('nets.opportunity.status.internalId')){
	 status : 13 	when stage == 'Closed Won'      		otherwise 			
	(        14 	when stage == 'Closed Lost'          	otherwise 			
	(        11 	when stage == 'Negotiation/Review'   	otherwise 	
	(         9 	when stage == 'Id. Decision Makers'  	otherwise 	
	(        10	    when stage == 'Proposal/Price Quote' 	otherwise 
     defaultStatus))))
} unless stage is :null otherwise defaultStatus
---
{
	externalId 			: payload.Id,
	title 				: payload.Name,
	closeDate 			: payload.CloseDate as :date,
	expectedCloseDate 	: payload.CloseDate as :date,
	probability 		: payload.Probability,
	entity 				: {
		internalId		: payload.InternalId,
		type			: 'CUSTOMER'
	},
	entityStatus		: {
		internalId		: stageToStatus(payload.StageName).status,
		type			: 'CUSTOMER_STATUS'
	}
}]]></dw:set-payload>
                </dw:transform-message>

                <netsuite:upsert-record config-ref="NetSuite" recordType="OPPORTUNITY" doc:name="Upsert Opportunities in Netsuite">
                    <netsuite:attributes ref="#[payload]"/>
                </netsuite:upsert-record>
                <logger message="Upserted opportunity with internal ID: #[payload.getInternalId()] " level="INFO" doc:name="Log Upsert result"/>
            </batch:step>


		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="Transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="Log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
                    <parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>

					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						to="${mail.to}" from="${mail.from}" subject="${mail.subject}"
						responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>

	<flow name="mainFlow" processingStrategy="synchronous"
		doc:description="This flow is the entry point to the Anypoint Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template exposes to trigger it.

">
		<batch:execute name="migrateOpportunitiesBatch"
			doc:name="Execute migrateOpportunitiesBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Catch Exception and call defaultChoiceExceptionStrategy" />
	</flow>

</mule>
